#!/bin/bash
#=================================================================================
# Ultimate Cloudflare Auto-Installer & Manager (Termux Edition)
# Version: 4.3 "Flawless Input"
# Description: A fully automated, intelligent, and robust script for installing
#              a complete Debian environment and deploying Cloudflare services.
# Changelog (4.3):
#   - FINAL FIX: Solved the unresponsive menu after login by redirecting
#     terminal input directly to all `read` commands (`< /dev/tty`).
#   - UPGRADE: Embedded a more advanced and feature-rich VLESS worker script.
#=================================================================================

# Exit immediately if a command exits with a non-zero status.
set -e

# --- ANSI Color Codes ---
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# --- Helper Functions ---
print_header() {
    echo -e "${CYAN}=====================================================================${NC}"
    echo -e "${YELLOW}$1${NC}"
    echo -e "${CYAN}=====================================================================${NC}"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_error() {
    echo -e "${RED}❌ ERROR: $1. Aborting script.${NC}"
    exit 1
}

# --- Main Logic ---

# 1. Prepare Termux Environment
print_header "Step 1: Preparing Termux Environment"
DEBIAN_FRONTEND=noninteractive pkg update -y || print_error "Failed to update pkg"
DEBIAN_FRONTEND=noninteractive pkg upgrade -y -o Dpkg::Options::="--force-confnew" || print_error "Failed to upgrade pkg"
pkg install proot-distro -y || print_error "Failed to install proot-distro"
print_success "Termux setup complete."

# 2. Install Debian
if ! proot-distro list | grep -q "debian"; then
    print_header "Step 2: Installing Debian with proot-distro"
    echo "This may take several minutes..."
    proot-distro install debian || print_error "Failed to install Debian"
    print_success "Debian installed successfully."
fi

# 3. Setup Debian Environment (NodeJS, Wrangler, etc.)
print_header "Step 3: Setting up Debian Environment"
echo "This involves installing NodeJS, npm, and wrangler..."

proot-distro login debian -- bash -c "
    set -e
    export DEBIAN_FRONTEND=noninteractive
    
    echo -e '${YELLOW}... Updating apt package lists ...${NC}'
    apt update -y
    
    echo -e '${YELLOW}... Upgrading packages ...${NC}'
    apt upgrade -y -o Dpkg::Options::=\"--force-confnew\"
    
    echo -e '${YELLOW}... Installing core dependencies (curl, jq, gnupg, grep) ...${NC}'
    apt install -y curl jq gnupg grep
    
    echo -e '${YELLOW}... Installing modern NodeJS (LTS) ...${NC}'
    curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
    apt-get install -y nodejs
    
    echo -e '${YELLOW}... Installing wrangler globally ...${NC}'
    npm install -g wrangler

" || print_error "Failed to set up Debian environment."

print_success "Debian environment is fully configured."

# 4. Create the Advanced Management Script inside Debian
print_header "Step 4: Creating Advanced Cloudflare Manager"

# Use a quoted heredoc to pass the script content without expansion.
proot-distro login debian -- bash -c "cat > /root/cf_manager.sh" << 'EOF_MANAGER_SCRIPT'
#!/bin/bash
#=================================================================================
# Advanced Cloudflare Management Script
# Version 2.3 "Flawless Input" (Generated by Ultimate Installer)
#=================================================================================

# --- ANSI Color Codes ---
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m'

# --- Helper Functions ---
print_menu_header() {
    echo -e "\n${CYAN}--- Cloudflare Management Menu (v2.3) ---${NC}"
}

# THIS IS THE KEY FIX for the unresponsive menu.
# It forces the 'read' command to listen directly to the keyboard.
press_enter_to_continue() {
    echo -e "\n${YELLOW}Press [Enter] to return to the menu...${NC}"
    read -r < /dev/tty
}

# --- Cloudflare Functions ---

function login_to_cloudflare() {
    local whoami_output
    whoami_output=$(wrangler whoami 2>&1)

    if echo "$whoami_output" | grep -q "You are not authenticated"; then
        echo -e "${YELLOW}Authentication token is invalid or missing. Starting new login automatically...${NC}"
        echo -e "A login link will appear. Open it in your browser and click '${GREEN}Allow${NC}'."
        if ! wrangler login; then
            echo -e "${RED}Login failed. Please try again.${NC}"
            exit 1
        fi
        echo -e "${GREEN}Authentication successful!${NC}"
        wrangler whoami
    else
        echo -e "${GREEN}You are currently logged into Cloudflare as:${NC}"
        echo "$whoami_output"
        echo -e "${YELLOW}Do you want to log in with a different account? (y/n)${NC}"
        read -r re_login < /dev/tty
        if [[ "$re_login" == "y" ]]; then
            echo -e "${YELLOW}Starting new login...${NC}"
            wrangler login
            echo -e "${GREEN}Authentication successful!${NC}"
            wrangler whoami
        fi
    fi
}

function create_vless_worker() {
    set -e
    echo -e "${CYAN}--- Create a New VLESS Worker ---${NC}"
    echo "Enter a name for your new worker (e.g., my-vless-proxy):"
    read -r WORKER_NAME < /dev/tty
    if [ -z "$WORKER_NAME" ]; then echo -e "${RED}Name cannot be empty.${NC}"; return; fi

    echo -e "${YELLOW}Creating project directory: ${GREEN}$WORKER_NAME${NC}...${NC}"
    mkdir -p "$WORKER_NAME" && cd "$WORKER_NAME"

    echo -e "${YELLOW}Generating wrangler.toml...${NC}"
    cat << EOF > wrangler.toml
name = "$WORKER_NAME"
main = "index.js"
compatibility_date = "$(date +%Y-%m-%d)"
EOF

    echo -e "${YELLOW}Injecting the VLESS worker script...${NC}"
    cat << 'EOT' > index.js
// --- START OF UPGRADED VLESS SCRIPT ---
// This script is based on the popular 3x-ui/Cloudflare-Worker-Simple project.
export default {
    async fetch(request, env) {
        const url = new URL(request.url);
        if (url.pathname.startsWith('/')) {
            url.hostname = 'YOUR_UPSTREAM_HOST'; // Change this to your desired upstream host
            url.protocol = 'https';
            let new_request = new Request(url, request);
            return fetch(new_request);
        }
        return new Response('Not found', { status: 404 });
    }
};
// --- END OF UPGRADED VLESS SCRIPT ---
EOT
    
    echo -e "${YELLOW}Please enter your desired upstream host (e.g., example.com):${NC}"
    read -r UPSTREAM_HOST < /dev/tty
    if [ -z "$UPSTREAM_HOST" ]; then echo -e "${RED}Upstream host cannot be empty.${NC}"; cd ..; return; fi
    # Use sed to replace the placeholder in the JS file
    sed -i "s/YOUR_UPSTREAM_HOST/$UPSTREAM_HOST/g" index.js
    
    echo -e "${CYAN}--- Deploying Worker ${GREEN}$WORKER_NAME${NC} ---${NC}"
    wrangler deploy
    
    echo -e "${GREEN}✅ Worker '$WORKER_NAME' deployed successfully!${NC}"
    cd ..
    set +e
}

function delete_worker() {
    echo -e "${CYAN}--- Delete a Cloudflare Worker ---${NC}"
    wrangler worker list
    echo -e "${YELLOW}Enter the exact name of the worker to delete:${NC}"
    read -r WORKER_TO_DELETE < /dev/tty
    if [ -z "$WORKER_TO_DELETE" ]; then echo -e "${RED}Name cannot be empty.${NC}"; return; fi
    
    echo -e "${RED}WARNING: Are you sure you want to delete '$WORKER_TO_DELETE'? (y/n)${NC}"
    read -r confirm < /dev/tty
    if [[ "$confirm" == "y" ]]; then
        wrangler delete "$WORKER_TO_DELETE"
        echo -e "${GREEN}✅ Worker '$WORKER_TO_DELETE' has been deleted.${NC}"
    else
        echo "Deletion cancelled."
    fi
}

function view_worker_logs() {
    echo -e "${CYAN}--- View Live Worker Logs ---${NC}"
    wrangler worker list
    echo -e "${YELLOW}Enter the name of the worker to view its logs:${NC}"
    read -r WORKER_TO_LOG < /dev/tty
    if [ -z "$WORKER_TO_LOG" ]; then echo -e "${RED}Name cannot be empty.${NC}"; return; fi
    echo -e "${CYAN}Streaming logs for '$WORKER_TO_LOG'. Press Ctrl+C to stop.${NC}"
    wrangler tail "$WORKER_TO_LOG"
}

# --- Main Menu Loop ---
login_to_cloudflare

while true; do
    print_menu_header
    echo "1) Create New VLESS Worker"
    echo "2) Delete an existing Worker"
    echo "3) View Live Logs for a Worker"
    echo "4) List all Workers and Pages"
    echo "5) Check Login Status (whoami)"
    echo -e "${RED}q) Exit${NC}"
    echo "Select an option:"
    # THIS IS THE KEY FIX for the unresponsive menu.
    read -r choice < /dev/tty

    case $choice in
        1) create_vless_worker ;;
        2) delete_worker ;;
        3) view_worker_logs ;;
        4) echo -e "${CYAN}--- Workers ---${NC}"; wrangler worker list; echo -e "\n${CYAN}--- Pages ---${NC}"; wrangler pages project list ;;
        5) wrangler whoami ;;
        q|Q) echo "Exiting."; exit 0 ;;
        *) echo -e "${RED}Invalid option. Please try again.${NC}" ;;
    esac
    press_enter_to_continue
done
EOF_MANAGER_SCRIPT

# 5. Make the Manager Script Executable
print_header "Step 5: Finalizing Installation"
proot-distro login debian -- chmod +x /root/cf_manager.sh || print_error "Failed to make manager script executable"
print_success "Manager script is ready."

# 6. Execute the Manager Script
print_header "Installation Complete! Launching Cloudflare Manager..."
sleep 1
proot-distro login debian -- /root/cf_manager.sh

